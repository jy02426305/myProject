<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!-- 不使用就需要注解掉，如果配置了启用注解注释，就必须要配置cacheManager 否则就会启动报错。因为配置了这个缓存拦截器就会去注入cacheManager -->
    <cache:annotation-driven cache-manager="redisCacheManager" proxy-target-class="true" />

    <!--springSession 配置（依赖spring-session）-->
    <bean id="sessionConfiguration"
          class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
        <!--修改session的有效时间-->
        <property name="maxInactiveIntervalInSeconds" value="7200"></property>
        <property name="redisNamespace" value="redisPractice" />
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 最小空闲数 -->
        <property name="minIdle" value="${redis.minIdle}"/>
        <!-- 最大空闲数 -->
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <!-- 最大连接数 -->
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <!-- 最大等待时间 单位毫秒（ms） -->
        <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
        <!-- 使用连接时测试连接是否可用 -->
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
        <!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值. -->
        <!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值. -->
        <!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。如果“链接”空闲超时，将会被移除。建议保持默认值. -->
        <!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) -->
    </bean>

    <bean id="redisClusterConfiguration"
          class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <constructor-arg name="clusterNodes">
            <list>
                <value>${redis.cluster1}</value>
                <value>${redis.cluster2}</value>
                <value>${redis.cluster3}</value>
                <value>${redis.cluster4}</value>
                <value>${redis.cluster5}</value>
                <value>${redis.cluster6}</value>
            </list>
        </constructor-arg>
    </bean>

    <!--集群-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig" ref="redisClusterConfiguration" />
        <constructor-arg name="poolConfig" ref="jedisPoolConfig" />
    </bean>

    <!--本地-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="poolConfig" ref="jedisPoolConfig" />
        <property name="hostName" value="{redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.password}" />
        <property name="usePool" value="true" />
    </bean>-->

    <!-- 缓存序列化方式 -->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    <bean id="jdkSerializationRedisSerializer"
          class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>

    <!-- 缓存 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <!-- 开启事务，集群模式不支持事务 -->
        <property name="enableTransactionSupport" value="false"></property>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
        <property name="hashKeySerializer" ref="keySerializer"/>
        <property name="hashValueSerializer" ref="valueSerializer"/>
    </bean>

    <!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        &lt;!&ndash; 开启事务 &ndash;&gt;
        &lt;!&ndash;<property name="enableTransactionSupport" value="true"></property>&ndash;&gt;
    </bean>-->

    <!--<bean id="redisCachePrefix" class="org.springframework.data.redis.cache.DefaultRedisCachePrefix">
        <constructor-arg name="delimiter" value=":ideatc:" />
    </bean>-->

    <bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg name="redisOperations" ref="redisTemplate"/>
        <!-- 过期时间 -->
        <property name="defaultExpiration" value="3600" />
        <!--    支持事务，集群模式不支持事务 -->
        <property name="transactionAware" value="false"/>
        <property name="usePrefix" value="true" />
        <!--默认是冒号:-->
        <!--<property name="cachePrefix" ref="redisCachePrefix" />-->
    </bean>

    <!-- redis操作 -->
    <!--<bean id="redisManager" class="com.cyx.project.common.session.RedisManager">
        <property name="redisTemplate" ref="redisTemplate" />
    </bean>-->

    <!-- Session ID 生成器 -->
    <!--<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"></bean>
    &lt;!&ndash; SessionDao实现类 &ndash;&gt;
    <bean id="sessionDAO" class="com.cyx.project.common.session.MySessionDao">
        <property name="sessionIdGenerator" ref="sessionIdGenerator"></property>
    </bean>

    &lt;!&ndash; sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID &ndash;&gt;
    <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
        &lt;!&ndash; cookie的name,对应的默认是 JSESSIONID &ndash;&gt;
        <constructor-arg name="name" value="SHAREJSESSIONID" />
        &lt;!&ndash; jsessionId的path为 / 用于多个系统共享jsessionId &ndash;&gt;
        <property name="path" value="/" />
        <property name="httpOnly" value="true"/>
    </bean>

    &lt;!&ndash; session管理 &ndash;&gt;
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="1800000"></property>
        <property name="deleteInvalidSessions" value="true"></property>
        <property name="sessionDAO" ref="sessionDAO"></property>
        &lt;!&ndash; sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID &ndash;&gt;
        <property name="sessionIdCookie" ref="sharesession" />
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="sessionManager" ref="sessionManager" />
        <property name="cacheManager" ref="" />
    </bean>

    &lt;!&ndash; shiro filter &ndash;&gt;
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>

        &lt;!&ndash;
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/home.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        &ndash;&gt;
        &lt;!&ndash; The 'filters' property is not necessary since any declared javax.servlet.Filter bean  &ndash;&gt;
        &lt;!&ndash; defined will be automatically acquired and available via its beanName in chain        &ndash;&gt;
        &lt;!&ndash; definitions, but you can perform instance overrides or name aliases here if you like: &ndash;&gt;
        &lt;!&ndash; <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> &ndash;&gt;
    </bean>-->

</beans>